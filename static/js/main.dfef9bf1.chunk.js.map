{"version":3,"sources":["AddTodo.jsx","Todos.jsx","App.jsx","serviceWorker.js","index.js"],"names":["AddTodo","state","data","id","handleChange","e","date","Date","creation","getYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","join","_this","setState","target","value","handleSubmit","preventDefault","extention","Math","random","toString","replace","substr","props","addTodo","react_default","a","createElement","Fragment","onSubmit","this","type","onChange","placeholder","autoComplete","required","className","Component","Todos","_ref","todos","deleteTodo","map","todo","key","onClick","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","tempTodos","concat","toConsumableArray","filter","localStorage","rtodos","JSON","parse","getItem","setItem","stringify","console","log","length","src_AddTodo","src_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfef9bf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass AddTodo extends Component {\n\tstate = {\n\t\tdata: null,\n\t\tid: null\n\t};\n\n\thandleChange = e => {\n\t\tlet date = new Date();\n\t\tlet components = [\n\t\t\tdate.getYear(),\n\t\t\tdate.getMonth(),\n\t\t\tdate.getDate(),\n\t\t\tdate.getHours(),\n\t\t\tdate.getMinutes(),\n\t\t\tdate.getSeconds(),\n\t\t\tdate.getMilliseconds()\n\t\t];\n\t\tlet creation = components.join('');\n\n\t\tthis.setState({\n\t\t\tdata: e.target.value,\n\t\t\tid: creation\n\t\t});\n\t};\n\n\thandleSubmit = e => {\n\t\te.preventDefault();\n\t\tlet extention = Math.random()\n\t\t\t.toString(36)\n\t\t\t.replace(/[^a-z]+/g, '')\n\t\t\t.substr(0, 5);\n\n\t\tthis.setState({\n\t\t\tid: this.state.id + extention\n\t\t});\n\t\tthis.props.addTodo(this.state);\n\t\tthis.setState({\n\t\t\tdata: ''\n\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tid='todo'\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tvalue={this.state.data || ''}\n\t\t\t\t\t\tplaceholder='Type Something...'\n\t\t\t\t\t\tautoComplete='off'\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<button className='add'>Add</button>\n\t\t\t\t</form>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default AddTodo;\n","import React from 'react';\n\nconst Todos = ({ todos, deleteTodo }) => {\n\treturn (\n\t\t<div className='todos-list'>\n\t\t\t{todos.map(todo => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className='todo' key={todo.id}>\n\t\t\t\t\t\t<p>{todo.data}</p>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName='delete'\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tdeleteTodo(todo.id);\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default Todos;\n","import React, { Component } from 'react';\nimport AddTodo from './AddTodo';\nimport Todos from './Todos';\nimport './styles.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tif (localStorage.rtodos) {\n\t\t\tthis.state = JSON.parse(localStorage.getItem('rtodos'));\n\t\t} else {\n\t\t\tthis.state = {\n\t\t\t\ttodos: []\n\t\t\t};\n\t\t\tlocalStorage.setItem('rtodos', JSON.stringify(this.state));\n\t\t}\n\t\tconsole.log('Started');\n\t}\n\n\tcomponentDidUpdate() {\n\t\tlocalStorage.setItem('rtodos', JSON.stringify(this.state));\n\t}\n\n\taddTodo = todo => {\n\t\tlet tempTodos = [...this.state.todos, todo];\n\t\tthis.setState({\n\t\t\ttodos: tempTodos\n\t\t});\n\t};\n\n\tdeleteTodo = id => {\n\t\tlet tempTodos = this.state.todos.filter(todo => {\n\t\t\treturn todo.id !== id;\n\t\t});\n\t\tthis.setState({\n\t\t\ttodos: tempTodos\n\t\t});\n\t};\n\n\trender() {\n\t\tif (this.state.todos.length > 0) {\n\t\t\treturn (\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<h1>Todos</h1>\n\t\t\t\t\t<div className='app'>\n\t\t\t\t\t\t<AddTodo addTodo={this.addTodo} className='addtodo' />\n\t\t\t\t\t\t<Todos\n\t\t\t\t\t\t\tclassName='todos'\n\t\t\t\t\t\t\ttodos={this.state.todos}\n\t\t\t\t\t\t\tkey={this.state.id}\n\t\t\t\t\t\t\tdeleteTodo={this.deleteTodo}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<h1>Todos</h1>\n\t\t\t\t\t<div className='app'>\n\t\t\t\t\t\t<AddTodo addTodo={this.addTodo} />\n\t\t\t\t\t\t<div className='no-todos'>\n\t\t\t\t\t\t\t<p>You've got Nothing to do...</p>\n\t\t\t\t\t\t\t<h5>Add todos.</h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}